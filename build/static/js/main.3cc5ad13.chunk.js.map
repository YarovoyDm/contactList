{"version":3,"sources":["utils.js","container/contacts/contacts.js","App.js","serviceWorker.js","history.js","index.js"],"names":["API","size","axios","get","moment","format","nationalities","sortOptions","value","label","Contacts","state","users","selectedOption","collectionSize","filteredByNat","nationalitiesFilter","AU","BR","CA","CH","DE","DK","ES","FI","FR","GB","IE","IR","NO","NL","NZ","TR","US","femaleFilter","maleFilter","femaleCollection","maleCollection","nameFilter","nameCollection","tableView","natCheckbox","nat","setState","filterByNat","_","item","key","user","nationalitiesCounter","natLenght","length","type","disabled","checked","onChange","genderWinner","update","then","res","data","results","gender","genderCheckbox","genderFilter","renderTableView","columns","id","Header","accessor","name","first","last","width","Cell","props","className","onClick","copy","location","street","number","city","dob","date","defaultPageSize","pageSizeOptions","renderTileView","index","email","phone","postcode","renderUsers","isFemaleFilterSelected","isMaleFilterSelected","isNameFilterSelected","isSortTypeDefault","isSortTypeAtoZ","sortedDataAtoZ","toLowerCase","sortedDataZtoA","getCorrentSortType","handleChange","onNameFilterChange","e","target","onViewChange","window","localStorage","setItem","getItem","this","JSON","parse","placeholder","options","cn","React","Component","Boolean","hostname","match","createBrowserHistory","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3cc5ad13.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const API = (size) => {\r\n    return axios.get(`https://randomuser.me/api/?results=${size}`)\r\n}","import React from 'react';\r\nimport * as _ from 'lodash';\r\nimport Select from 'react-select';\r\nimport copy from 'copy-to-clipboard';\r\nimport Toggle from 'react-toggle';\r\nimport ReactTable from 'react-table-v6'\r\nimport cn from 'classnames'\r\nimport moment from 'moment';\r\nimport { API } from '../../utils';\r\n\r\nimport './contacts.css'\r\nimport 'react-toggle/style.css'\r\nimport 'react-table-v6/react-table.css'\r\n\r\nmoment().format();\r\n\r\nconst nationalities = [\r\n    'AU', 'BR', 'CA',\r\n    'CH', 'DE', 'DK',\r\n    'ES', 'FI', 'FR',\r\n    'GB', 'IE', 'IR',\r\n    'NO', 'NL', 'NZ',\r\n    'TR', 'US'\r\n]\r\n\r\nconst sortOptions = [\r\n    { value: 'default', label: 'Default' },\r\n    { value: 'AtoZ', label: 'A to Z' },\r\n    { value: 'ZtoA', label: 'Z to A' },\r\n];\r\n\r\nclass Contacts extends React.Component {\r\n\r\n    state = {\r\n        users: [],\r\n        selectedOption: {\r\n            label: \"Default\",\r\n            value: \"default\"\r\n        },\r\n        collectionSize: null,\r\n        filteredByNat: null,\r\n        nationalitiesFilter: {\r\n            AU: false,\r\n            BR: false,\r\n            CA: false,\r\n            CH: false,\r\n            DE: false,\r\n            DK: false,\r\n            ES: false,\r\n            FI: false,\r\n            FR: false,\r\n            GB: false,\r\n            IE: false,\r\n            IR: false,\r\n            NO: false,\r\n            NL: false,\r\n            NZ: false,\r\n            TR: false,\r\n            US: false\r\n        },\r\n        femaleFilter: false,\r\n        maleFilter: false,\r\n        femaleCollection: {},\r\n        maleCollection: {},\r\n        nameFilter: '',\r\n        nameCollection: {},\r\n        tableView: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        !window.localStorage.getItem('tableViewMode') && window.localStorage.setItem('tableViewMode', true)\r\n        this.setState({\r\n            collectionSize: _.random(10, 50),\r\n            tableView: JSON.parse(window.localStorage.getItem('tableViewMode'))\r\n        }, () => {\r\n            API(this.state.collectionSize).then((res) => {\r\n                this.setState({\r\n                    users: res.data.results,\r\n                    femaleCollection: _.filter(res.data.results, user => user.gender === 'female'),\r\n                    maleCollection: _.filter(res.data.results, user => user.gender === 'male')\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    natCheckbox = (nat) => {\r\n        this.setState({\r\n            nationalitiesFilter: {\r\n                ...this.state.nationalitiesFilter,\r\n                [nat]: !this.state.nationalitiesFilter[nat]\r\n            }\r\n        }, () => {\r\n            let filterByNat = _.map(_.pickBy(this.state.nationalitiesFilter), (item, key) => key)\r\n            if (!_.isEmpty(filterByNat)) {\r\n                let filteredByNat = _.flatMap(filterByNat, item => {\r\n                    return _.filter(this.state.users, user => user.nat === item)\r\n                })\r\n                this.setState({\r\n                    filteredByNat\r\n                })\r\n            }\r\n            else {\r\n                this.setState({\r\n                    filteredByNat: []\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    nationalitiesCounter = () => {\r\n        return _.map(nationalities, nat => {\r\n            const natLenght = _.filter(this.state.users, user => user.nat === nat).length\r\n            return <div key={nat}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    disabled={!natLenght}\r\n                    checked={this.state.nationalitiesFilter.nat}\r\n                    onChange={() => this.natCheckbox(nat)}\r\n                />\r\n                {nat}: {natLenght}\r\n            </div>\r\n        })\r\n    }\r\n\r\n    genderWinner = () => {\r\n        if (this.state.femaleCollection.length < this.state.maleCollection.length) {\r\n            return 'Мужчин больше'\r\n        }\r\n        if (this.state.femaleCollection.length > this.state.maleCollection.length) {\r\n            return 'Женщин больше'\r\n        } else {\r\n            return 'Паритет'\r\n        }\r\n    }\r\n\r\n    update = () => {\r\n        API(this.state.collectionSize).then((res) => {\r\n            this.setState({\r\n                users: res.data.results,\r\n                femaleCollection: _.filter(res.data.results, user => user.gender === 'female'),\r\n                maleCollection: _.filter(res.data.results, user => user.gender === 'male')\r\n            })\r\n        })\r\n    }\r\n\r\n    genderCheckbox = (gender) => {\r\n        this.setState({\r\n            [gender]: !this.state[gender]\r\n        })\r\n    }\r\n\r\n    genderFilter = () => {\r\n        return <>\r\n            <div>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={this.state.femaleFilter}\r\n                    onChange={() => this.genderCheckbox('femaleFilter')}\r\n                />\r\n                Женщины\r\n            </div>\r\n            <div>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={this.state.maleFilter}\r\n                    onChange={() => this.genderCheckbox('maleFilter')}\r\n                />\r\n                Мужчины\r\n            </div>\r\n        </>\r\n    }\r\n\r\n    renderTableView = (data) => {\r\n        const columns = [{\r\n            id: 'name',\r\n            Header: 'Name',\r\n            accessor: user => user.name.first + ' ' + user.name.last,\r\n            width: 150\r\n        }, {\r\n            Header: 'Email',\r\n            accessor: 'email',\r\n            Cell: props => \r\n                <span \r\n                    className='copyble' \r\n                    onClick={() => copy(props.value)}\r\n                >\r\n                    {props.value}\r\n                </span>,\r\n            width: 250\r\n        }, {\r\n            Header: 'Phone',\r\n            accessor: 'phone',\r\n            Cell: props => \r\n                <span \r\n                    className='copyble' \r\n                    onClick={() => copy(props.value)}\r\n                >\r\n                    {props.value}\r\n                </span>,\r\n            width: 120\r\n        }, {\r\n            id: 'address',\r\n            Header: 'Address',\r\n            accessor: user => user.location.street.number + ' ' + user.location.street.name + ' ' + user.location.city + ' ' + user.location.state,\r\n        }, {\r\n            Header: 'Postcode',\r\n            accessor: 'location.postcode',\r\n            width: 80\r\n        }, {\r\n            id: 'birthday',\r\n            Header: 'Birthday',\r\n            accessor: user => moment(user.dob.date).format('MM-DD-YYYY'),\r\n            width: 100\r\n        }]\r\n\r\n        return <ReactTable\r\n            className=\"main-table\"\r\n            data={data}\r\n            defaultPageSize={15}\r\n            pageSizeOptions={[5, 10, 15]}\r\n            columns={columns}\r\n        />\r\n    }\r\n\r\n    renderTileView = (data) => {\r\n        return _.map(data, (user, index) => {\r\n            return <div key={index}>\r\n                <div className='user'>\r\n                    <div>{user.name.first} {user.name.last}</div>\r\n                    <div className='copyble' onClick={() => copy(user.email)}>{user.email}</div>\r\n                    <div className='copyble' onClick={() => copy(user.phone)}>{user.phone}</div>\r\n                    <div>\r\n                        {user.location.street.number} &nbsp;\r\n                        {user.location.street.name}, &nbsp;\r\n                        {user.location.city}, &nbsp;\r\n                        {user.location.state}, &nbsp;\r\n                        <br />\r\n                        {user.location.postcode}</div>\r\n                    <div>{moment(user.dob.date).format('MM-DD-YYYY')}</div>\r\n                </div>\r\n            </div>\r\n        })\r\n    }\r\n\r\n    renderUsers = () => {\r\n        const {\r\n            femaleFilter,\r\n            maleFilter,\r\n            nameFilter,\r\n            filteredByNat,\r\n            femaleCollection,\r\n            maleCollection,\r\n            nameCollection,\r\n            users,\r\n            selectedOption,\r\n            tableView\r\n        } = this.state\r\n\r\n        const isFemaleFilterSelected = femaleFilter\r\n        const isMaleFilterSelected = maleFilter\r\n        const isNameFilterSelected = nameFilter\r\n        const isNatFilterSelected = _.isEmpty(filteredByNat)\r\n        let data = []\r\n        if (!isNatFilterSelected) {\r\n            data = filteredByNat\r\n        } else if (isFemaleFilterSelected) {\r\n            data = femaleCollection\r\n        } else if (isMaleFilterSelected) {\r\n            data = maleCollection\r\n        } else if (isNameFilterSelected) {\r\n            data = nameCollection\r\n        } else {\r\n            data = users\r\n        }\r\n        const isSortTypeDefault = selectedOption.value === 'default'\r\n        const isSortTypeAtoZ = selectedOption.value === 'AtoZ'\r\n        let sortedDataAtoZ = []\r\n        if (selectedOption.value === 'AtoZ') {\r\n            sortedDataAtoZ = _.sortBy(data, (item) => item.name.first.toLowerCase())\r\n        }\r\n        let sortedDataZtoA = _.reverse(_.sortBy(data, (item) => item.name.first.toLowerCase()))\r\n        const sortOrder = isSortTypeAtoZ ? sortedDataAtoZ : sortedDataZtoA\r\n        const getCorrentSortType = isSortTypeDefault ? data : sortOrder\r\n        return tableView\r\n            ?\r\n            this.renderTableView(getCorrentSortType)\r\n            :\r\n            this.renderTileView(getCorrentSortType)\r\n    }\r\n\r\n    handleChange = selectedOption => {\r\n        this.setState({ selectedOption })\r\n    }\r\n\r\n    onNameFilterChange = (e) => {\r\n        this.setState({\r\n            nameFilter: e.target.value,\r\n            nameCollection: _.filter(this.state.users, user => \r\n                _.startsWith(user.name.first.toLowerCase(), e.target.value.toLowerCase()))\r\n        })\r\n    }\r\n\r\n    onViewChange = (e) => {\r\n        this.setState({\r\n            tableView: e.target.checked,\r\n        })\r\n        window.localStorage.setItem('tableViewMode', e.target.checked);\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            selectedOption,\r\n            femaleCollection,\r\n            maleCollection,\r\n            users,\r\n            tableView,\r\n            nameFilter\r\n        } = this.state;\r\n\r\n        return (\r\n            <div className='main'>\r\n                <div className='main-left'>\r\n                    <div className='main-statistics'>\r\n                        <div className='statistics-title'>Statistics</div>\r\n                        <div className=\"hello\">Размер коллекции: {users.length}</div>\r\n                        <div className=\"hello\">Количество женщин: {femaleCollection.length}</div>\r\n                        <div className=\"hello\">Количество мужчин: {maleCollection.length}</div>\r\n                        {this.genderWinner()}\r\n                    </div>\r\n                    <div className=\"main-view\">\r\n                        Table view <Toggle checked={tableView} onChange={this.onViewChange} />\r\n                    </div>\r\n                    <div className='main-filters'>\r\n                        <div className=\"filters-title\">Filters</div>\r\n                        <button onClick={() => this.update()}>Update</button>\r\n                        <div className=\"filters-name\">\r\n                            <div className=\"filters-name-title\">Name filter</div>\r\n                            <input\r\n                                value={nameFilter}\r\n                                placeholder='Name...'\r\n                                onChange={this.onNameFilterChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"filters-gender\">\r\n                            <div className=\"filters-gender-title\">Gender filter</div>\r\n                            <div>\r\n                                {this.genderFilter()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"filters-alphabet\">\r\n                            <div className=\"filters-alphabet-title\">Alphabet filter</div>\r\n                            <Select\r\n                                className=\"alphabet-select\"\r\n                                value={selectedOption}\r\n                                onChange={this.handleChange}\r\n                                options={sortOptions}\r\n                            />\r\n                        </div>\r\n                        <div className=\"filters-nat\">\r\n                            <div className=\"filters-nat-title\">Nationalities filter</div>\r\n                            <div>\r\n                                {this.nationalitiesCounter()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={cn('main-right', { 'main-right-grid': !tableView })}>\r\n                    {this.renderUsers()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contacts;\r\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Contacts from './container/contacts/contacts';\nimport \"./App.css\"\n\nclass App extends React.Component {\n  render() {\n    return (<>\n      <Switch>\n        <Route component={Contacts} />\n      </Switch>\n    </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createBrowserHistory} from 'history';\r\nexport default createBrowserHistory();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport history from './history';\nimport { Router } from 'react-router-dom';\n\nReactDOM.render(\n  <b>aveo</b>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}